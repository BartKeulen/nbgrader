import re
import random

from traitlets import Dict, Unicode, Bool, observe
from traitlets.config.loader import Config
from textwrap import dedent

from .. import utils
from . import NbGraderPreprocessor
from typing import Any, Tuple
from nbformat.notebooknode import NotebookNode
from nbconvert.exporters.exporter import ResourcesDict


class RandomizeNotebook(NbGraderPreprocessor):
    """A preprocessor for randomizing variables in a notebook.
    
    """

    begin_random_var = Unicode(
        "RANDOM ",
        help="The comment marking a random variable. Append the command from the python random library that generates the random variable (e.g., ### RANDOM random.randint(0, 1000)"
    ).tag(config=True)


    def preprocess(self, nb: NotebookNode, resources: ResourcesDict) -> Tuple[NotebookNode, ResourcesDict]:
        nb, resources = super(RandomizeNotebook, self).preprocess(nb, resources)
        if 'celltoolbar' in nb.metadata:
            del nb.metadata['celltoolbar']
        return nb, resources

    def preprocess_cell(self,
                        cell: NotebookNode,
                        resources: ResourcesDict,
                        cell_index: int
                        ) -> Tuple[NotebookNode, ResourcesDict]:
        """Find a line in the cell that ends with the comment `self.begin_random_var` (e.g. ### RANDOM random.randint(0, 1000)). Replace that variable's value with a random value generated by the command given (e.g., in the example the variable is generated using `random.randint(0, 1000)`).

        This modifies the cell in place.
        """
        # pull out the cell input/source
        lines = cell.source.split("\n")

        new_lines = []
        
        for line in lines:
            if self.begin_random_var in line:
                equal_idx = line.find("=")
                if equal_idx == -1:
                    raise RuntimeError("Tried to add a random variable in a line that contains no variable assignment.")

                cmd_idx = line.find(self.begin_random_var) + len(self.begin_random_var)
                random_cmd = line[cmd_idx:]
                
                # TODO: Wrap in try except
                random_value = eval(random_cmd)
                
                line = f"{line[:equal_idx]}= {random_value}"

            new_lines.append(line)  

        # replace the cell source
        cell.source = "\n".join(new_lines)

        return cell, resources